---
- name: Backup Solr Cloud collection
  uri:
    url: '{{ sc_base_url }}/replication?'
    body: '{{ sc_backup_params | join("&") }}'
    method: POST
    creates: '{{ item.location | d (sc_backup_location) }}/snapshot.{{ item.name }}-{{ ansible_date_time.epoch }}'
  run_once: yes
  loop: '{{ sc_backup_list }}'
  register: sc_backup_collection

- name: Create list of snapshot paths
  set_fact:
    snapshot_paths: '{{ sc_backup_collection.results | map(attribute="invocation") | map(attribute="module_args") | map(attribute="creates") | reject("undefined") | list }}'

- name: Create list of snapshot directory names
  set_fact:
    snapshot_dir_names: '{{ snapshot_dir_names | d ([]) + [ item | basename ] }}'
  loop: '{{ snapshot_paths }}'

- name: Get stat check of folder
  stat:
    path: '{{ item }}'
  loop: '{{ snapshot_paths }}'
  register: stat_check

- debug:
    var: stat_check.results
      
- name: Pause for solr backup to be completed
  pause:
    minutes: 1
    
- name: Create .tar.gz file from snapshot directory
  archive:
    path: '{{ item }}'
    dest: '/tmp/{{ item | basename }}.tar.gz'
  loop: '{{ snapshot_paths }}'

- name: Copy tar.gz file to S3 bucket
  aws_s3:
    bucket: '{{ item.0.bucket | d (sc_backup_bucket) }}'
    object: '{{ item.0.bucket_key | d (sc_backup_bucket_key) | regex_replace(get_trailing_slash, "") }}/{{ item.1 | basename }}.tar.gz'
    src: '/tmp/{{ item.1 | basename }}.tar.gz'
    mode: put
  vars:
    get_trailing_slash: \/$
  loop: '{{ sc_backup_list | zip(snapshot_paths) | list }}'

#- name: Display Snapshot dir names
#  debug:
#    var: snapshot_dir_names